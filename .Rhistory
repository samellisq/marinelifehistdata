) %>%
dplyr::arrange(dataset) %>%
dplyr::select(dataset, pop.num)
} else(population.key = data.frame(dataset = numeric(), pop.num = numeric()))
if(nrow(dplyr::filter(marine.lifehist.datasetextras$datasetsextras_populations.key,dataset %in% datasets.key$dataset))>0){
population.key =
dplyr::bind_rows(population.key,
marine.lifehist.datasetextras$datasetsextras_populations.key %>%
dplyr::filter(dataset %in% datasets.key$dataset) %>%
dplyr::mutate(pop.identifier.recount = seq(1:dplyr::n())) %>%
dplyr::mutate(pop.num = pop.identifier.recount + max(population.key$pop.num)) %>%
dplyr::select(dataset, pop.num)
) %>%
dplyr::arrange(dataset)
}
population.key$pop.num = ifelse(is.infinite(population.key$pop.num), 1, population.key$pop.num)
datasets.key = dplyr::left_join(datasets.key, population.key)
##Rearrange age sample for input (output: by age, and samples long)
datasets.key =
dplyr::left_join(datasets.key,
marine.lifehist.speciesdata$species_age.maturity %>%
dplyr::select(species, sex, age.mat)
)
## REARRAGE AGE SAMPLES TO FORM INPUTS
samples.list = list()
byage.list = list()
R = nrow(datasets.key)
for(i in 1:R){
all.datasets = dplyr::bind_rows(datasets.list)
dataset.raw = dplyr::filter(all.datasets, dataset == datasets.key$dataset[i])
dataset.raw = dplyr::left_join(dataset.raw, datasets.key, by = "dataset")
samples.i= data.frame(
age = dataset.raw$age,
age.adj = dataset.raw$age - datasets.key$age.mat[i],
dataset.num = dataset.raw$dataset.num,
species.num = dataset.raw$species.num
)
samples.i = dplyr::filter(samples.i, age.adj >=0) # because some datasets  include juveniles
if(nrow(samples.i) < 3){
warning(paste("Dataset ", datasets.key$dataset[i] , " contains fewer than three adult samples", sep = ""))
stop()
}
samples.list[[i]] = samples.i
byage =
data.frame(
age.adj = seq(0, 99,1),
sex = ifelse(datasets.key$sex[i] == "F", 1,2)
)
byage$n.dead = numeric(nrow(byage))
for(j in 1:nrow(byage)){byage$n.dead[j] = sum(byage$age.adj[j] == samples.list[[i]]$age.adj)}
# byage$s.vector = rep.int(0, nrow(byage))
# byage$s.vector= ifelse(byage$age.adj >25, 0, 0) # will need to input s data here
byage$species.num = samples.list[[i]]$species.num[1]
byage$dataset.num = samples.list[[i]]$dataset.num[1]
byage.list[[i]] = byage
}
samples.df = dplyr::bind_rows(samples.list)
byage = dplyr::bind_rows(byage.list)
### GET MAX AGES
maxages = numeric(max(byage$dataset.num))
for(i in 1:max(byage$dataset.num)){
(maxages[i] = max(samples.df$age.adj[samples.df$dataset.num == i]))
}
### SORT BIAS INPUTS
# 1. Age estimation
ageest.inclusion.vector = rep.int(1, max(byage$dataset.num))
#2. Sampling bias
biasmat = marinelifehistdata::get_biasmat(datasets.key, marine.lifehist.datasetextras$datasetsextras_bias.details)
bias.direction.vector = marinelifehistdata::get_bias.direction.vector(datasets.key, marine.lifehist.datasetextras$datasetsextras_bias.details)
bias.inclusion.vector = marinelifehistdata::get_bias.inclusion.vector(biasmat)
#3. Population change
popchange.direction = marinelifehistdata::get_popchange.vector(datasets.key, marine.lifehist.datakey, marine.lifehist.datasetextras$datasetsextras_bias.details)
popchange.inclusion.vector = rep.int(1, max(byage$dataset.num))
## PRIORS
priors = marinesurvival::get_gomp_prior_shapes()
## PUT IT ALL TOGETHER
mod.list = list(
Nages = nrow(byage)/max(byage$dataset.num), # Number of ages in the data (e.g. 0-10, Nages = 11)
Nsamples = nrow(samples.df), # Number of samples
age = seq(0, max(byage$age.adj), 1), # All ages
sample_ages = samples.df$age.adj, # Ages of sampled animals
Nspecies = max(byage$species.num), # how many species in the data
Ndatasets = max(byage$dataset.num),
Npopulations = max(datasets.key$pop.num),
species_vector = as.array(distinct(select(byage, dataset.num, species.num))$species.num), # vector indicating which species each dataset belongs to
population_vector = as.array(datasets.key$pop.num),
dataset_vector = samples.df$dataset.num, # dataset id of each sample. For our purposes they are all the
species_sex_vector = as.array(distinct(select(byage, sex, species.num))$sex ),
species_maxages = as.array(maxages), # Maximum possible age. Needed for some technical reasons.
prior_a_s1 = priors$shape1_a, # Just the priors from before
prior_a_s2 = priors$shape2_a,
prior_b_s1 = priors$shape1_b,
prior_b_s2 = priors$shape2_b,
# all the following need to be 'as.array' to make it work. But it doesn;t actually change the data. just its 'type'. A necessarry quirk.
include_age_est_error = as.array(ageest.inclusion.vector), # 0 for do not include 1 for include
age_error_sd = ifelse(samples.df$age == 0, 0.01, samples.df$age*0.05), # error based on real rather than adjusted age
include_samplebias_error = as.array(bias.inclusion.vector), # 0 for do not include 1 for include
BiasMat = biasmat, # A vector showing if a particualr age is subject toa biased sample (1) or not (0).
direction_samplebias = as.array(bias.direction.vector), # +1/-1/0. 0 for UNK/Both
include_popchange_error = as.array(popchange.inclusion.vector), # 0 for do not include 1 for include
direction_popchange = as.array(popchange.direction) # +1/-1/0. 0 for UNK/Both
)
return(mod.list)
}
datasets.listsets = get_lifehist_data(data.type = "age-structure", species = "KillerWhale", sex = NULL)
create_marinesurvival_modinput(datasets.listsets)
usethis::use_pipe()
create_marinesurvival_modinput(datasets.listsets)
require(magrittr)
create_marinesurvival_modinput(datasets.listsets)
create_marinesurvival_modinput = function(datasets.list){
datasets.key = dplyr::filter(marine.lifehist.datakey, dataset %in% names(datasets.list))
## NUMBER DATASETS AND SPECIES
datasets.key$dataset.num = seq(1,nrow(datasets.key), 1)
datasets.key$species.sex = paste(datasets.key$species, datasets.key$sex, sep = ".")
species.key =
datasets.key %>%
dplyr::arrange(species.sex) %>%
dplyr::select(species, species.sex, sex) %>%
dplyr::distinct()
species.key$species.num = seq(1, nrow(species.key), 1)
datasets.key = dplyr::left_join(datasets.key, species.key)
## CREATE AND APPLY POPULATION KEY
if(nrow(dplyr::filter(datasets.key, !(dataset %in% marine.lifehist.datasetextras$datasetsextras_populations.key$dataset))) > 0){
population.key=
datasets.key %>%
dplyr::filter(!(dataset %in% marine.lifehist.datasetextras$datasetsextras_populations.key$dataset)) %>%
dplyr::left_join(dplyr::select(marine.lifehist.datakey, dataset, reference)) %>%
dplyr::group_by( reference, species) %>%
dplyr::summarise(n = dplyr::n()) %>%
dplyr::ungroup() %>%
dplyr::mutate(pop.num = seq(1:dplyr::n())) %>%
dplyr::right_join(
datasets.key %>%
dplyr::filter(!(dataset %in% marine.lifehist.datasetextras$datasetsextras_populations.key$dataset)) %>%
dplyr::select(dataset) %>%
dplyr::left_join(dplyr::select(marine.lifehist.datakey, species, dataset, reference))
) %>%
dplyr::arrange(dataset) %>%
dplyr::select(dataset, pop.num)
} else(population.key = data.frame(dataset = numeric(), pop.num = numeric()))
if(nrow(dplyr::filter(marine.lifehist.datasetextras$datasetsextras_populations.key,dataset %in% datasets.key$dataset))>0){
population.key =
dplyr::bind_rows(population.key,
marine.lifehist.datasetextras$datasetsextras_populations.key %>%
dplyr::filter(dataset %in% datasets.key$dataset) %>%
dplyr::mutate(pop.identifier.recount = seq(1:dplyr::n())) %>%
dplyr::mutate(pop.num = pop.identifier.recount + max(population.key$pop.num)) %>%
dplyr::select(dataset, pop.num)
) %>%
dplyr::arrange(dataset)
}
population.key$pop.num = ifelse(is.infinite(population.key$pop.num), 1, population.key$pop.num)
datasets.key = dplyr::left_join(datasets.key, population.key)
##Rearrange age sample for input (output: by age, and samples long)
datasets.key =
dplyr::left_join(datasets.key,
marine.lifehist.speciesdata$species_age.maturity %>%
dplyr::select(species, sex, age.mat)
)
## REARRAGE AGE SAMPLES TO FORM INPUTS
samples.list = list()
byage.list = list()
R = nrow(datasets.key)
for(i in 1:R){
all.datasets = dplyr::bind_rows(datasets.list)
dataset.raw = dplyr::filter(all.datasets, dataset == datasets.key$dataset[i])
dataset.raw = dplyr::left_join(dataset.raw, datasets.key, by = "dataset")
samples.i= data.frame(
age = dataset.raw$age,
age.adj = dataset.raw$age - datasets.key$age.mat[i],
dataset.num = dataset.raw$dataset.num,
species.num = dataset.raw$species.num
)
samples.i = dplyr::filter(samples.i, age.adj >=0) # because some datasets  include juveniles
if(nrow(samples.i) < 3){
warning(paste("Dataset ", datasets.key$dataset[i] , " contains fewer than three adult samples", sep = ""))
stop()
}
samples.list[[i]] = samples.i
byage =
data.frame(
age.adj = seq(0, 99,1),
sex = ifelse(datasets.key$sex[i] == "F", 1,2)
)
byage$n.dead = numeric(nrow(byage))
for(j in 1:nrow(byage)){byage$n.dead[j] = sum(byage$age.adj[j] == samples.list[[i]]$age.adj)}
# byage$s.vector = rep.int(0, nrow(byage))
# byage$s.vector= ifelse(byage$age.adj >25, 0, 0) # will need to input s data here
byage$species.num = samples.list[[i]]$species.num[1]
byage$dataset.num = samples.list[[i]]$dataset.num[1]
byage.list[[i]] = byage
}
samples.df = dplyr::bind_rows(samples.list)
byage = dplyr::bind_rows(byage.list)
### GET MAX AGES
maxages = numeric(max(byage$dataset.num))
for(i in 1:max(byage$dataset.num)){
(maxages[i] = max(samples.df$age.adj[samples.df$dataset.num == i]))
}
### SORT BIAS INPUTS
# 1. Age estimation
ageest.inclusion.vector = rep.int(1, max(byage$dataset.num))
#2. Sampling bias
biasmat = marinelifehistdata::get_biasmat(datasets.key, marine.lifehist.datasetextras$datasetsextras_bias.details)
bias.direction.vector = marinelifehistdata::get_bias.direction.vector(datasets.key, marine.lifehist.datasetextras$datasetsextras_bias.details)
bias.inclusion.vector = marinelifehistdata::get_bias.inclusion.vector(biasmat)
#3. Population change
popchange.direction = marinelifehistdata::get_popchange.vector(datasets.key, marine.lifehist.datakey, marine.lifehist.datasetextras$datasetsextras_bias.details)
popchange.inclusion.vector = rep.int(1, max(byage$dataset.num))
## PRIORS
priors = marinesurvival::get_gomp_prior_shapes()
## PUT IT ALL TOGETHER
mod.list = list(
Nages = nrow(byage)/max(byage$dataset.num), # Number of ages in the data (e.g. 0-10, Nages = 11)
Nsamples = nrow(samples.df), # Number of samples
age = seq(0, max(byage$age.adj), 1), # All ages
sample_ages = samples.df$age.adj, # Ages of sampled animals
Nspecies = max(byage$species.num), # how many species in the data
Ndatasets = max(byage$dataset.num),
Npopulations = max(datasets.key$pop.num),
species_vector = as.array(dplyr::distinct(dplyr::select(byage, dataset.num, species.num))$species.num), # vector indicating which species each dataset belongs to
population_vector = as.array(datasets.key$pop.num),
dataset_vector = samples.df$dataset.num, # dataset id of each sample. For our purposes they are all the
species_sex_vector = as.array(dplyr::distinct(dplyr::select(byage, sex, species.num))$sex ),
species_maxages = as.array(maxages), # Maximum possible age. Needed for some technical reasons.
prior_a_s1 = priors$shape1_a, # Just the priors from before
prior_a_s2 = priors$shape2_a,
prior_b_s1 = priors$shape1_b,
prior_b_s2 = priors$shape2_b,
# all the following need to be 'as.array' to make it work. But it doesn;t actually change the data. just its 'type'. A necessarry quirk.
include_age_est_error = as.array(ageest.inclusion.vector), # 0 for do not include 1 for include
age_error_sd = ifelse(samples.df$age == 0, 0.01, samples.df$age*0.05), # error based on real rather than adjusted age
include_samplebias_error = as.array(bias.inclusion.vector), # 0 for do not include 1 for include
BiasMat = biasmat, # A vector showing if a particualr age is subject toa biased sample (1) or not (0).
direction_samplebias = as.array(bias.direction.vector), # +1/-1/0. 0 for UNK/Both
include_popchange_error = as.array(popchange.inclusion.vector), # 0 for do not include 1 for include
direction_popchange = as.array(popchange.direction) # +1/-1/0. 0 for UNK/Both
)
return(mod.list)
}
datasets.listsets = get_lifehist_data(data.type = "age-structure", species = "KillerWhale", sex = NULL)
create_marinesurvival_modinput(datasets.listsets)
datasets.listsets = get_lifehist_data(data.type = "age-structure", species = "KillerWhale", sex = "F")
create_marinesurvival_modinput(datasets.listsets)
datasets.listsets = get_lifehist_data(data.type = "age-structure", species = "ShortFinnedPilotWhale", sex = "F")
create_marinesurvival_modinput(datasets.listsets)
devtools::document()
rm(list = c("create_marinesurvival_modinput"))
devtools::document()
library(marinelifehistdata)
devtools::document()
usethis::use_pipe(export = TRUE)
devtools::document()
?usethis::use_pipe
usethis::use_package("magrittr")
devtools::load_all(".")
usethis::use_pipe()
devtools::document()
devtools::load_all(".")
library(marinelifehistdata)
devtools::document()
library(marinelifehistdata)
library(marinelifehistdata)
get_lifehist_data()
get_lifehist_data(species = "NorthernRightWhaleDolphins")
get_lifehist_data(species = "NorthernRightWhaleDolphin")
library(marinelifehistdata)
library(marinesurvival)
eg.datasets = get_lifehist_data(data.type = "age-structure", species = "NorthernRightWhaleDolphin", sex = NULL) #NULL will give data for both
mod.list = create_marinesurvival_modinput(eg.datasets)
mod.list
set_cmdstan_path(path = "D:/cmdstan/cmdstan-2.28.1")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE,
message = FALSE
)
library(marinelifehistdata)
library(marinesurvival)
library(cmdstanr)
set_cmdstan_path(path = "D:/cmdstan/cmdstan-2.28.1")
require(Matrix)
library(tidyverse)
eg.datasets = get_lifehist_data(data.type = "age-structure", species = "NorthernRightWhaleDolphin", sex = NULL) #NULL will give data for both
mod.list = create_marinesurvival_modinput(eg.datasets)
mod.list
stancode = get_marinesurvival_stancode(mod.dat)
stancode = get_marinesurvival_stancode(mod.list)
modobj = stan_model(model_code=mod.list)
modobj = cmdstan_model(model_code=mod.list)
?cmdstan_model
cmdstan.modobj = cmdstan_model(stan_file= write_stan_file(mod.list))
cmdstan.modobj = cmdstan_model(stan_file= write_stan_file(stancode))
mod = cmdstan.modobj$sample(data = mod.list, parallel_chains = 4, init = generate_inits(4,mod.list))
mod$summary()
library(marinelifehistdata)
library(marinesurvival)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE,
message = FALSE
)
library(marinelifehistdata)
library(marinesurvival)
library(cmdstanr)
eg.datasets = get_lifehist_data(data.type = "age-structure", species = "NorthernRightWhaleDolphin", sex = NULL) #NULL will give data for both
mod.list = create_marinesurvival_modinput(eg.datasets)
mod.list
stancode = get_marinesurvival_stancode(mod.list)
cmdstan.modobj = cmdstan_model(stan_file= write_stan_file(stancode))
set_cmdstan_path(path = "D:/cmdstan/cmdstan-2.28.1")
require(Matrix)
cmdstan.modobj = cmdstan_model(stan_file= write_stan_file(stancode))
mod = cmdstan.modobj$sample(data = mod.list, parallel_chains = 4, init = generate_inits(4,mod.list))
library(rstan)
modobj = stan_model(model_code = stancode)
mod = readRDS("lifespanmod_FM.ONLYNorthernRightWhaleDolphin.modfsSR.HMC.RDS")
summary(mod)
out = precis(mod, digits = 4, depth = 2)
?rethinking::precis()
rethinking::precis
summary(mod)
out = summary(mod, digits = 4)
out
activepars = get_activepars(out = out, mod = mod, input.list = mod.list)
out[rownames(out) %in% activepars,]
activepars
out = summary(mod, digits = 4, depth = 2)
out
activepars = get_activepars(out = out, mod = mod, input.list = mod.list)
activepars
rownames(out)
out
out = summary(mod)
out
rownames(out$summary)
out = summary(mod, digits = 4, depth = 2)$summary
activepars = get_activepars(out = out, mod = mod, input.list = mod.list)
activepars
out[rownames(out) %in% activepars,]
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = minages[mod.list$species_vector], names.key = species.key, datasetskey = datasets.key)
age.seq = seq(min(byage$age.adj), max(byage$age.adj),1)
mod.list$Nages
age.seq = seq(0, 100,1)
post = extract.samples(mod)
extract(mod)
post = extract(mod)
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = minages[mod.list$species_vector], names.key = species.key, datasetskey = datasets.key)
ages.at.mat =
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin")
marine.lifehist.speciesdata$species_age.maturity
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin")
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin")
ages.at.mat =
marine.lifehist.speciesdata[$species_age.maturity][1] %>%
marine.lifehist.speciesdata[$species_age.maturity[[1]] %>%
ages.at.mat =
marine.lifehist.speciesdata[[1]] %>%
filter(species == "NorthernRightWhaleDolphin")
agematdata =marine.lifehist.speciesdata$species_age.maturity
ages.at.mat =
agematdata %>%
filter(species == "NorthernRightWhaleDolphin")
ages.at.mat =
agematdata %>%
dplyr::filter(species == "NorthernRightWhaleDolphin")
require(tidyverse)
ages.at.mat =
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin")
ages.at.mat
ages.at.mat
ages.at.mat =
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin") %>%
arrange(sex)$age.mat
ages.at.mat =
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin") %>%
arrange(sex)
ages.at.mat = ages.at.mat$age.mat
ages.at.mat
age.seq = seq(0, 100,1)
post = extract(mod)
post
extract(mod)
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = minages[mod.list$species_vector], names.key = species.key, datasetskey = datasets.key)
mod = readRDS("lifespanmod_FM.ONLYNorthernRightWhaleDolphin.modfsSR.HMC.RDS")
#summary(mod)$summary
out = summary(mod, digits = 4, depth = 2)$summary
activepars = get_activepars(out = out, mod = mod, input.list = mod.list)
out[rownames(out) %in% activepars,]
post = extract(mod)
post = rstan::extract(mod)
?plot_modtosample
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = ages.at.mat)
rethinking::PI()
?rethinking::PI()
rethinking::PI
PI = function(samples, prob = 0.89){
{
x <- sapply(prob, function(p) {
a <- (1 - p)/2
quantile(samples, probs = c(a, 1 - a))
})
n <- length(prob)
result <- rep(0, n * 2)
for (i in 1:n) {
low_idx <- n + 1 - i
up_idx <- n + i
result[low_idx] <- x[1, i]
result[up_idx] <- x[2, i]
a <- (1 - prob[i])/2
names(result)[low_idx] <- concat(round(a * 100, 0), "%")
names(result)[up_idx] <- concat(round((1 - a) * 100,
0), "%")
}
return(result)
}
}
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = ages.at.mat)
rethinking::concat()
?rethinking::concat()
detach("package:marinesurvival")
detach("package:marinesurvival", unload = TRUE)
detach("marinesurvival", unload = TRUE)
library(marinelifehistdata)
library(marinesurvival)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE,
message = FALSE
)
library(marinelifehistdata)
library(marinesurvival)
library(cmdstanr)
library(rstan)
set_cmdstan_path(path = "D:/cmdstan/cmdstan-2.28.1")
require(Matrix)
library(tidyverse)
eg.datasets = get_lifehist_data(data.type = "age-structure", species = "NorthernRightWhaleDolphin", sex = NULL) #NULL will give data for both
mod.list = create_marinesurvival_modinput(eg.datasets)
mod.list
stancode = get_marinesurvival_stancode(mod.list)
mod = readRDS("lifespanmod_FM.ONLYNorthernRightWhaleDolphin.modfsSR.HMC.RDS")
#summary(mod)$summary
out = summary(mod, digits = 4, depth = 2)$summary
activepars = get_activepars(out = out, mod = mod, input.list = mod.list)
out[rownames(out) %in% activepars,]
age.seq = seq(0, 100,1)
post = rstan::extract(mod)
ages.at.mat =
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin") %>%
arrange(sex)
ages.at.mat = ages.at.mat$age.mat
ages.at.mat
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = ages.at.mat)
get_lifehist_data(data.type = "age-structure", species = "NorthernRightWhaleDolphin", sex = NULL, return.key = TRUE)[[1]]
age.seq = seq(0, 100,1)
post = rstan::extract(mod)
ages.at.mat =
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin") %>%
arrange(sex)
ages.at.mat = ages.at.mat$age.mat
datasets.key = get_lifehist_data(data.type = "age-structure", species = "NorthernRightWhaleDolphin", sex = NULL, return.key = TRUE)[[1]]
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = ages.at.mat, dataset.is = datasets.key$dataset)
age.seq = seq(0, 100,1)
post = rstan::extract(mod)
ages.at.mat =
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin") %>%
arrange(sex)
ages.at.mat = ages.at.mat$age.mat
datasets.key = get_lifehist_data(data.type = "age-structure", species = "NorthernRightWhaleDolphin", sex = NULL, return.key = TRUE)[[1]]
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = ages.at.mat)
datasets.key$species.num = mod.list$species_sex_vector
datasets.key$species.num = mod.list$species_vector
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = ages.at.mat, names.key = datasets.key, datasetskey = marine.lifehist.datakey)
datasets.key$dataset.num = seq(1,4, 1)
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = ages.at.mat, names.key = datasets.key, datasetskey = datasets.key)
surv.plot = plot_posteriorsurvival(post = post, age.seq = age.seq, input.list = mod.list, names.key = species.key, N = 150)
surv.plot = plot_posteriorsurvival(post = post, age.seq = age.seq, input.list = mod.list, names.key = datasets.key, N = 150)
surv.plot
surv.plot = plot_posteriorsurvival(post = post, age.seq = age.seq, input.list = mod.list, names.key = datasets.key, N = 150)
surv.plot
plot_posteriorsurvival(post = post, age.seq = age.seq, input.list = mod.list, names.key = datasets.key, N = 50)
plot_posteriorsurvival(post = post, age.seq = age.seq, input.list = mod.list, names.key = datasets.key, N = 150)
plot_ageX(X = 0.1, post = post, age.seq = age.seq, input.list = mod.list, minages = minages, names.key = species.key)
plot_ageX(X = 0.1, post = post, age.seq = age.seq, input.list = mod.list, minages = ages.at.mat, names.key = species.key)
plot_ageX(X = 0.1, post = post, age.seq = age.seq, input.list = mod.list, minages = ages.at.mat, names.key = datasets.key)
ageX.df = plot_ageX(X = 0.1, post = post, age.seq = age.seq, minages = ages.at.mat, names.key = datasets.key, return.data = TRUE)
require(cmdstanr)
cite(cmdstanr)
cite("cmdstanr")
library(marinelifehistdata)
marine.lifehist.speciesdata
marine.lifehist.datakey
marine.lifehist.data
marine.lifehist.speciesdata
bibliography
bibliography$1
bibliography[,1]
bibliography[1,]
