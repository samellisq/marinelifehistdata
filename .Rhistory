usethis::use_package("magrittr")
devtools::load_all(".")
usethis::use_pipe()
devtools::document()
devtools::load_all(".")
library(marinelifehistdata)
devtools::document()
library(marinelifehistdata)
library(marinelifehistdata)
get_lifehist_data()
get_lifehist_data(species = "NorthernRightWhaleDolphins")
get_lifehist_data(species = "NorthernRightWhaleDolphin")
library(marinelifehistdata)
library(marinesurvival)
eg.datasets = get_lifehist_data(data.type = "age-structure", species = "NorthernRightWhaleDolphin", sex = NULL) #NULL will give data for both
mod.list = create_marinesurvival_modinput(eg.datasets)
mod.list
set_cmdstan_path(path = "D:/cmdstan/cmdstan-2.28.1")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE,
message = FALSE
)
library(marinelifehistdata)
library(marinesurvival)
library(cmdstanr)
set_cmdstan_path(path = "D:/cmdstan/cmdstan-2.28.1")
require(Matrix)
library(tidyverse)
eg.datasets = get_lifehist_data(data.type = "age-structure", species = "NorthernRightWhaleDolphin", sex = NULL) #NULL will give data for both
mod.list = create_marinesurvival_modinput(eg.datasets)
mod.list
stancode = get_marinesurvival_stancode(mod.dat)
stancode = get_marinesurvival_stancode(mod.list)
modobj = stan_model(model_code=mod.list)
modobj = cmdstan_model(model_code=mod.list)
?cmdstan_model
cmdstan.modobj = cmdstan_model(stan_file= write_stan_file(mod.list))
cmdstan.modobj = cmdstan_model(stan_file= write_stan_file(stancode))
mod = cmdstan.modobj$sample(data = mod.list, parallel_chains = 4, init = generate_inits(4,mod.list))
mod$summary()
library(marinelifehistdata)
library(marinesurvival)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE,
message = FALSE
)
library(marinelifehistdata)
library(marinesurvival)
library(cmdstanr)
eg.datasets = get_lifehist_data(data.type = "age-structure", species = "NorthernRightWhaleDolphin", sex = NULL) #NULL will give data for both
mod.list = create_marinesurvival_modinput(eg.datasets)
mod.list
stancode = get_marinesurvival_stancode(mod.list)
cmdstan.modobj = cmdstan_model(stan_file= write_stan_file(stancode))
set_cmdstan_path(path = "D:/cmdstan/cmdstan-2.28.1")
require(Matrix)
cmdstan.modobj = cmdstan_model(stan_file= write_stan_file(stancode))
mod = cmdstan.modobj$sample(data = mod.list, parallel_chains = 4, init = generate_inits(4,mod.list))
library(rstan)
modobj = stan_model(model_code = stancode)
mod = readRDS("lifespanmod_FM.ONLYNorthernRightWhaleDolphin.modfsSR.HMC.RDS")
summary(mod)
out = precis(mod, digits = 4, depth = 2)
?rethinking::precis()
rethinking::precis
summary(mod)
out = summary(mod, digits = 4)
out
activepars = get_activepars(out = out, mod = mod, input.list = mod.list)
out[rownames(out) %in% activepars,]
activepars
out = summary(mod, digits = 4, depth = 2)
out
activepars = get_activepars(out = out, mod = mod, input.list = mod.list)
activepars
rownames(out)
out
out = summary(mod)
out
rownames(out$summary)
out = summary(mod, digits = 4, depth = 2)$summary
activepars = get_activepars(out = out, mod = mod, input.list = mod.list)
activepars
out[rownames(out) %in% activepars,]
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = minages[mod.list$species_vector], names.key = species.key, datasetskey = datasets.key)
age.seq = seq(min(byage$age.adj), max(byage$age.adj),1)
mod.list$Nages
age.seq = seq(0, 100,1)
post = extract.samples(mod)
extract(mod)
post = extract(mod)
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = minages[mod.list$species_vector], names.key = species.key, datasetskey = datasets.key)
ages.at.mat =
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin")
marine.lifehist.speciesdata$species_age.maturity
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin")
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin")
ages.at.mat =
marine.lifehist.speciesdata[$species_age.maturity][1] %>%
marine.lifehist.speciesdata[$species_age.maturity[[1]] %>%
ages.at.mat =
marine.lifehist.speciesdata[[1]] %>%
filter(species == "NorthernRightWhaleDolphin")
agematdata =marine.lifehist.speciesdata$species_age.maturity
ages.at.mat =
agematdata %>%
filter(species == "NorthernRightWhaleDolphin")
ages.at.mat =
agematdata %>%
dplyr::filter(species == "NorthernRightWhaleDolphin")
require(tidyverse)
ages.at.mat =
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin")
ages.at.mat
ages.at.mat
ages.at.mat =
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin") %>%
arrange(sex)$age.mat
ages.at.mat =
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin") %>%
arrange(sex)
ages.at.mat = ages.at.mat$age.mat
ages.at.mat
age.seq = seq(0, 100,1)
post = extract(mod)
post
extract(mod)
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = minages[mod.list$species_vector], names.key = species.key, datasetskey = datasets.key)
mod = readRDS("lifespanmod_FM.ONLYNorthernRightWhaleDolphin.modfsSR.HMC.RDS")
#summary(mod)$summary
out = summary(mod, digits = 4, depth = 2)$summary
activepars = get_activepars(out = out, mod = mod, input.list = mod.list)
out[rownames(out) %in% activepars,]
post = extract(mod)
post = rstan::extract(mod)
?plot_modtosample
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = ages.at.mat)
rethinking::PI()
?rethinking::PI()
rethinking::PI
PI = function(samples, prob = 0.89){
{
x <- sapply(prob, function(p) {
a <- (1 - p)/2
quantile(samples, probs = c(a, 1 - a))
})
n <- length(prob)
result <- rep(0, n * 2)
for (i in 1:n) {
low_idx <- n + 1 - i
up_idx <- n + i
result[low_idx] <- x[1, i]
result[up_idx] <- x[2, i]
a <- (1 - prob[i])/2
names(result)[low_idx] <- concat(round(a * 100, 0), "%")
names(result)[up_idx] <- concat(round((1 - a) * 100,
0), "%")
}
return(result)
}
}
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = ages.at.mat)
rethinking::concat()
?rethinking::concat()
detach("package:marinesurvival")
detach("package:marinesurvival", unload = TRUE)
detach("marinesurvival", unload = TRUE)
library(marinelifehistdata)
library(marinesurvival)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE,
message = FALSE
)
library(marinelifehistdata)
library(marinesurvival)
library(cmdstanr)
library(rstan)
set_cmdstan_path(path = "D:/cmdstan/cmdstan-2.28.1")
require(Matrix)
library(tidyverse)
eg.datasets = get_lifehist_data(data.type = "age-structure", species = "NorthernRightWhaleDolphin", sex = NULL) #NULL will give data for both
mod.list = create_marinesurvival_modinput(eg.datasets)
mod.list
stancode = get_marinesurvival_stancode(mod.list)
mod = readRDS("lifespanmod_FM.ONLYNorthernRightWhaleDolphin.modfsSR.HMC.RDS")
#summary(mod)$summary
out = summary(mod, digits = 4, depth = 2)$summary
activepars = get_activepars(out = out, mod = mod, input.list = mod.list)
out[rownames(out) %in% activepars,]
age.seq = seq(0, 100,1)
post = rstan::extract(mod)
ages.at.mat =
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin") %>%
arrange(sex)
ages.at.mat = ages.at.mat$age.mat
ages.at.mat
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = ages.at.mat)
get_lifehist_data(data.type = "age-structure", species = "NorthernRightWhaleDolphin", sex = NULL, return.key = TRUE)[[1]]
age.seq = seq(0, 100,1)
post = rstan::extract(mod)
ages.at.mat =
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin") %>%
arrange(sex)
ages.at.mat = ages.at.mat$age.mat
datasets.key = get_lifehist_data(data.type = "age-structure", species = "NorthernRightWhaleDolphin", sex = NULL, return.key = TRUE)[[1]]
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = ages.at.mat, dataset.is = datasets.key$dataset)
age.seq = seq(0, 100,1)
post = rstan::extract(mod)
ages.at.mat =
marine.lifehist.speciesdata$species_age.maturity %>%
filter(species == "NorthernRightWhaleDolphin") %>%
arrange(sex)
ages.at.mat = ages.at.mat$age.mat
datasets.key = get_lifehist_data(data.type = "age-structure", species = "NorthernRightWhaleDolphin", sex = NULL, return.key = TRUE)[[1]]
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = ages.at.mat)
datasets.key$species.num = mod.list$species_sex_vector
datasets.key$species.num = mod.list$species_vector
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = ages.at.mat, names.key = datasets.key, datasetskey = marine.lifehist.datakey)
datasets.key$dataset.num = seq(1,4, 1)
plot_modtosample(age.seq = age.seq, post = post, input.list = mod.list, minages = ages.at.mat, names.key = datasets.key, datasetskey = datasets.key)
surv.plot = plot_posteriorsurvival(post = post, age.seq = age.seq, input.list = mod.list, names.key = species.key, N = 150)
surv.plot = plot_posteriorsurvival(post = post, age.seq = age.seq, input.list = mod.list, names.key = datasets.key, N = 150)
surv.plot
surv.plot = plot_posteriorsurvival(post = post, age.seq = age.seq, input.list = mod.list, names.key = datasets.key, N = 150)
surv.plot
plot_posteriorsurvival(post = post, age.seq = age.seq, input.list = mod.list, names.key = datasets.key, N = 50)
plot_posteriorsurvival(post = post, age.seq = age.seq, input.list = mod.list, names.key = datasets.key, N = 150)
plot_ageX(X = 0.1, post = post, age.seq = age.seq, input.list = mod.list, minages = minages, names.key = species.key)
plot_ageX(X = 0.1, post = post, age.seq = age.seq, input.list = mod.list, minages = ages.at.mat, names.key = species.key)
plot_ageX(X = 0.1, post = post, age.seq = age.seq, input.list = mod.list, minages = ages.at.mat, names.key = datasets.key)
ageX.df = plot_ageX(X = 0.1, post = post, age.seq = age.seq, minages = ages.at.mat, names.key = datasets.key, return.data = TRUE)
require(cmdstanr)
cite(cmdstanr)
cite("cmdstanr")
library(marinelifehistdata)
marine.lifehist.speciesdata
marine.lifehist.datakey
marine.lifehist.data
marine.lifehist.speciesdata
bibliography
bibliography$1
bibliography[,1]
bibliography[1,]
usethis::use_git()
use_this::use_git_config(user.name = "samellisq", user.email = "samellisq@gmail.com")
usethis::use_git_config(user.name = "samellisq", user.email = "samellisq@gmail.com")
usethis::use_git()
usethis::use_github()
usethis::use_github(overwrite = TRUE)
usethis::use_github("origin", url = NULL, overwrite = TRUE)
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)`
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
usethis::use_github()
usethis::use_citation()
marine.lifehist.speciesdata
data(marine.lifehist.speciesdata)
View(marine.lifehist.speciesdata)
marine.lifehist.speciesdata
getwd()
local.data.wd
## code to prepare `DATASET` dataset goes here
## Run this to reload data from local folders. Not included in package, just for me
##https://r-pkgs.org/data.html
rm(list = ls())
require(tidyverse)
# usethis::use_data(DATASET, overwrite = TRUE)
current.wd = here::here()
local.data.wd = paste(stringr::str_split(current.wd, "Methods/", simplify = TRUE)[1], "Comparative/Projects/Menopause Evolution/Data Library/Data", sep = "")
setwd(local.data.wd)
rm(list = ls())
require(matrix)
require(tidyverse)
# usethis::use_data(DATASET, overwrite = TRUE)
current.wd = here::here()
local.data.wd = paste(stringr::str_split(current.wd, "Methods/", simplify = TRUE)[1], "Comparative/Projects/Menopause Evolution/Data Library/Data", sep = "")
setwd(local.data.wd)
local.data.wd
require(Matrix)
require(tidyverse)
setwd("G:/My Drive/Work/Methods/Created Packages/Whale Database/marinelifehistdata")
## code to prepare `DATASET` dataset goes here
## Run this to reload data from local folders. Not included in package, just for me
##https://r-pkgs.org/data.html
rm(list = ls())
require(Matrix)
require(tidyverse)
# usethis::use_data(DATASET, overwrite = TRUE)
current.wd = here::here()
local.data.wd = paste(stringr::str_split(current.wd, "Methods/", simplify = TRUE)[1], "Comparative/Projects/Menopause Evolution/Data Library/Data", sep = "")
setwd(local.data.wd)
### Data Key
# require(readxl) # will change eventually, easiest to have it as xlsx for now (freeze panes etc)
marine.lifehist.datakey = readxl::read_excel("0 Data Key v1.xlsx")
marine.lifehist.datakey = select(marine.lifehist.datakey, -notes, -from, - details.checked)
## References
bibliography = readxl::read_excel(paste(current.wd, "/data-raw/references/refs as CSV.xlsx", sep=  "")) # as excel becasue then it importas the non latin letters
## The data
marine.lifehist.data = list()
for(i in 1:nrow(marine.lifehist.datakey)){
dataset = read_csv(paste(marine.lifehist.datakey$dataset[i], ".csv",sep = ""))
if(ncol(dataset) == 2 &marine.lifehist.datakey$data[i] == "age-structure"){
dataset = data.frame(ages = rep(dataset$age, dataset$n))
}
dataset$dataset = i
names(dataset) = ifelse(names(dataset) == "ages", "age", names(dataset))
marine.lifehist.data[[i]] = dataset
}
names(marine.lifehist.data) = seq(1, length(marine.lifehist.data), 1)
## Dataset extras
setwd(local.data.wd)
marine.lifehist.datasetextras = list()
biasdetails = read_csv("../Extra Data/datasets_extras.csv")
marine.lifehist.datasetextras[[1]] = biasdetails
names(marine.lifehist.datasetextras)[1] = "datasetsextras_bias.details"
pop.ids = read_csv("../Extra Data/datasets_population.identifiers.csv")
marine.lifehist.datasetextras[[2]] = pop.ids
names(marine.lifehist.datasetextras)[2] = "datasetsextras_populations.key"
### Species.level data
setwd(local.data.wd)
marine.lifehist.speciesdata = list()
#1 species names data
names.key = read_csv("../Extra Data/species_whale.names.csv")
marine.lifehist.speciesdata[[1]] = names.key
names(marine.lifehist.speciesdata)[1] = "species_names.key"
#2 ages at matruity
agemat.df = read_csv("../Extra Data/species_age.maturity.csv")
marine.lifehist.speciesdata[[2]] = agemat.df
names(marine.lifehist.speciesdata)[2] = "species_age.maturity"
#3
sizedat.raw = read_csv("../Extra Data/species_size.csv")
marine.lifehist.speciesdata[[3]] = sizedat.raw
names(marine.lifehist.speciesdata)[3] = "species_raw.sizes"
#4
lengthdat.processed = read_csv("../../Analysis/Menopause Evolution II/size_length.estimates.csv")
marine.lifehist.speciesdata[[4]] = lengthdat.processed
names(marine.lifehist.speciesdata)[4] = "species_length"
#5
weightdat.procesed = read_csv("../../Analysis/Menopause Evolution II/size_weight.estimates.csv")
marine.lifehist.speciesdata[[5]] = weightdat.procesed
names(marine.lifehist.speciesdata)[5] = "species_mass"
#### EXPORT to DATA folder
setwd(current.wd)
usethis::use_data(marine.lifehist.datakey, overwrite = TRUE)
usethis::use_data(marine.lifehist.data, overwrite = TRUE)
usethis::use_data(marine.lifehist.speciesdata, overwrite = TRUE)
usethis::use_data(bibliography, overwrite = TRUE)
usethis::use_data(marine.lifehist.datasetextras, overwrite = TRUE)
marine.lifehist.speciesdata
library(marinelifehistdata)
## code to prepare `DATASET` dataset goes here
## Run this to reload data from local folders. Not included in package, just for me
##https://r-pkgs.org/data.html
rm(list = ls())
require(Matrix)
require(tidyverse)
# usethis::use_data(DATASET, overwrite = TRUE)
current.wd = here::here()
local.data.wd = paste(stringr::str_split(current.wd, "Methods/", simplify = TRUE)[1], "Comparative/Projects/Menopause Evolution/Data Library/Data", sep = "")
setwd(local.data.wd)
### Data Key
# require(readxl) # will change eventually, easiest to have it as xlsx for now (freeze panes etc)
marine.lifehist.datakey = readxl::read_excel("0 Data Key v1.xlsx")
marine.lifehist.datakey = select(marine.lifehist.datakey, -notes, -from, - details.checked)
## References
bibliography = readxl::read_excel(paste(current.wd, "/data-raw/references/refs as CSV.xlsx", sep=  "")) # as excel becasue then it importas the non latin letters
## The data
marine.lifehist.data = list()
for(i in 1:nrow(marine.lifehist.datakey)){
dataset = read_csv(paste(marine.lifehist.datakey$dataset[i], ".csv",sep = ""))
if(ncol(dataset) == 2 &marine.lifehist.datakey$data[i] == "age-structure"){
dataset = data.frame(ages = rep(dataset$age, dataset$n))
}
dataset$dataset = i
names(dataset) = ifelse(names(dataset) == "ages", "age", names(dataset))
marine.lifehist.data[[i]] = dataset
}
names(marine.lifehist.data) = seq(1, length(marine.lifehist.data), 1)
## Dataset extras
setwd(local.data.wd)
marine.lifehist.datasetextras = list()
biasdetails = read_csv("../Extra Data/datasets_extras.csv")
marine.lifehist.datasetextras[[1]] = biasdetails
names(marine.lifehist.datasetextras)[1] = "datasetsextras_bias.details"
pop.ids = read_csv("../Extra Data/datasets_population.identifiers.csv")
marine.lifehist.datasetextras[[2]] = pop.ids
names(marine.lifehist.datasetextras)[2] = "datasetsextras_populations.key"
### Species.level data
setwd(local.data.wd)
marine.lifehist.speciesdata = list()
#1 species names data
names.key = read_csv("../Extra Data/species_whale.names.csv")
marine.lifehist.speciesdata[[1]] = names.key
names(marine.lifehist.speciesdata)[1] = "species_names.key"
#2 ages at matruity
agemat.df = read_csv("../Extra Data/species_age.maturity.csv")
marine.lifehist.speciesdata[[2]] = agemat.df
names(marine.lifehist.speciesdata)[2] = "species_age.maturity"
#3
sizedat.raw = read_csv("../Extra Data/species_size.csv")
marine.lifehist.speciesdata[[3]] = sizedat.raw
names(marine.lifehist.speciesdata)[3] = "species_raw.sizes"
#4
lengthdat.processed = read_csv("../../Analysis/Menopause Evolution II/size_length.estimates.csv")
marine.lifehist.speciesdata[[4]] = lengthdat.processed
names(marine.lifehist.speciesdata)[4] = "species_length"
#5
weightdat.procesed = read_csv("../../Analysis/Menopause Evolution II/size_weight.estimates.csv")
marine.lifehist.speciesdata[[5]] = weightdat.procesed
names(marine.lifehist.speciesdata)[5] = "species_mass"
#### EXPORT to DATA folder
setwd(current.wd)
usethis::use_data(marine.lifehist.datakey, overwrite = TRUE)
usethis::use_data(marine.lifehist.data, overwrite = TRUE)
usethis::use_data(marine.lifehist.speciesdata, overwrite = TRUE)
usethis::use_data(bibliography, overwrite = TRUE)
usethis::use_data(marine.lifehist.datasetextras, overwrite = TRUE)
bibliography
tail(bibliography)
## code to prepare `DATASET` dataset goes here
## Run this to reload data from local folders. Not included in package, just for me
##https://r-pkgs.org/data.html
rm(list = ls())
require(Matrix)
require(tidyverse)
# usethis::use_data(DATASET, overwrite = TRUE)
current.wd = here::here()
local.data.wd = paste(stringr::str_split(current.wd, "Methods/", simplify = TRUE)[1], "Comparative/Projects/Menopause Evolution/Data Library/Data", sep = "")
setwd(local.data.wd)
### Data Key
# require(readxl) # will change eventually, easiest to have it as xlsx for now (freeze panes etc)
marine.lifehist.datakey = readxl::read_excel("0 Data Key v1.xlsx")
marine.lifehist.datakey = select(marine.lifehist.datakey, -notes, -from, - details.checked)
## References
bibliography = readxl::read_excel(paste(current.wd, "/data-raw/references/refs as CSV.xlsx", sep=  "")) # as excel becasue then it importas the non latin letters
## The data
marine.lifehist.data = list()
for(i in 1:nrow(marine.lifehist.datakey)){
dataset = read_csv(paste(marine.lifehist.datakey$dataset[i], ".csv",sep = ""))
if(ncol(dataset) == 2 &marine.lifehist.datakey$data[i] == "age-structure"){
dataset = data.frame(ages = rep(dataset$age, dataset$n))
}
dataset$dataset = i
names(dataset) = ifelse(names(dataset) == "ages", "age", names(dataset))
marine.lifehist.data[[i]] = dataset
}
names(marine.lifehist.data) = seq(1, length(marine.lifehist.data), 1)
## Dataset extras
setwd(local.data.wd)
marine.lifehist.datasetextras = list()
biasdetails = read_csv("../Extra Data/datasets_extras.csv")
marine.lifehist.datasetextras[[1]] = biasdetails
names(marine.lifehist.datasetextras)[1] = "datasetsextras_bias.details"
pop.ids = read_csv("../Extra Data/datasets_population.identifiers.csv")
marine.lifehist.datasetextras[[2]] = pop.ids
names(marine.lifehist.datasetextras)[2] = "datasetsextras_populations.key"
### Species.level data
setwd(local.data.wd)
marine.lifehist.speciesdata = list()
#1 species names data
names.key = read_csv("../Extra Data/species_whale.names.csv")
marine.lifehist.speciesdata[[1]] = names.key
names(marine.lifehist.speciesdata)[1] = "species_names.key"
#2 ages at matruity
agemat.df = read_csv("../Extra Data/species_age.maturity.csv")
marine.lifehist.speciesdata[[2]] = agemat.df
names(marine.lifehist.speciesdata)[2] = "species_age.maturity"
#3
sizedat.raw = read_csv("../Extra Data/species_size.csv")
marine.lifehist.speciesdata[[3]] = sizedat.raw
names(marine.lifehist.speciesdata)[3] = "species_raw.sizes"
#4
lengthdat.processed = read_csv("../../Analysis/Menopause Evolution II/size_length.estimates.csv")
marine.lifehist.speciesdata[[4]] = lengthdat.processed
names(marine.lifehist.speciesdata)[4] = "species_length"
#5
weightdat.procesed = read_csv("../../Analysis/Menopause Evolution II/size_weight.estimates.csv")
marine.lifehist.speciesdata[[5]] = weightdat.procesed
names(marine.lifehist.speciesdata)[5] = "species_mass"
#### EXPORT to DATA folder
setwd(current.wd)
usethis::use_data(marine.lifehist.datakey, overwrite = TRUE)
usethis::use_data(marine.lifehist.data, overwrite = TRUE)
usethis::use_data(marine.lifehist.speciesdata, overwrite = TRUE)
usethis::use_data(bibliography, overwrite = TRUE)
usethis::use_data(marine.lifehist.datasetextras, overwrite = TRUE)
marine.lifehist.speciesdata
library(marinelifehistdata)
library(marinelifehistdata)
vignette(marinelifehistdata)
vignette("marinelifehistdata")
vignette("marinelifehistdata")
library(marinelifehistdata)
vignette("marinelifehistdata")
devtools::instll()
devtools::install()
vignette("marinelifehistdata")
require(marinelifehistdata)
vignette("marinelifehistdata")
